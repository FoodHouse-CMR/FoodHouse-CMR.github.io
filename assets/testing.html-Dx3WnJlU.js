import{_ as s,c as a,b as p,a as t}from"./app-BQO2_VqH.js";const e={};function l(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="testing-guide" tabindex="-1"><a class="header-anchor" href="#testing-guide"><span>Testing Guide</span></a></h1><h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview"><span>Overview</span></a></h2><p>This guide provides comprehensive information about testing the FoodHouse application. It covers unit testing, integration testing, end-to-end testing, and performance testing.</p><h2 id="unit-testing" tabindex="-1"><a class="header-anchor" href="#unit-testing"><span>Unit Testing</span></a></h2><h3 id="go-unit-tests" tabindex="-1"><a class="header-anchor" href="#go-unit-tests"><span>Go Unit Tests</span></a></h3><ol><li><p><strong>Service Tests</strong></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">TestUserService_CreateUser</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Setup</span></span>
<span class="line">    mockRepo <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>MockUserRepository<span class="token punctuation">)</span></span>
<span class="line">    service <span class="token operator">:=</span> <span class="token function">NewUserService</span><span class="token punctuation">(</span>mockRepo<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    tests <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">        name    <span class="token builtin">string</span></span>
<span class="line">        user    <span class="token operator">*</span>User</span>
<span class="line">        wantErr <span class="token builtin">bool</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            name<span class="token punctuation">:</span> <span class="token string">&quot;valid user&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            user<span class="token punctuation">:</span> <span class="token operator">&amp;</span>User<span class="token punctuation">{</span></span>
<span class="line">                Email<span class="token punctuation">:</span>    <span class="token string">&quot;test@example.com&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                Password<span class="token punctuation">:</span> <span class="token string">&quot;password123&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            wantErr<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            name<span class="token punctuation">:</span> <span class="token string">&quot;invalid email&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            user<span class="token punctuation">:</span> <span class="token operator">&amp;</span>User<span class="token punctuation">{</span></span>
<span class="line">                Email<span class="token punctuation">:</span>    <span class="token string">&quot;invalid-email&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                Password<span class="token punctuation">:</span> <span class="token string">&quot;password123&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            wantErr<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> tt <span class="token operator">:=</span> <span class="token keyword">range</span> tests <span class="token punctuation">{</span></span>
<span class="line">        t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>tt<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// Setup expectations</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token operator">!</span>tt<span class="token punctuation">.</span>wantErr <span class="token punctuation">{</span></span>
<span class="line">                mockRepo<span class="token punctuation">.</span><span class="token function">On</span><span class="token punctuation">(</span><span class="token string">&quot;Create&quot;</span><span class="token punctuation">,</span> mock<span class="token punctuation">.</span>Anything<span class="token punctuation">,</span> tt<span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// Execute</span></span>
<span class="line">            err <span class="token operator">:=</span> service<span class="token punctuation">.</span><span class="token function">CreateUser</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tt<span class="token punctuation">.</span>user<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// Assert</span></span>
<span class="line">            <span class="token keyword">if</span> tt<span class="token punctuation">.</span>wantErr <span class="token punctuation">{</span></span>
<span class="line">                assert<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                assert<span class="token punctuation">.</span><span class="token function">NoError</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">                mockRepo<span class="token punctuation">.</span><span class="token function">AssertExpectations</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Repository Tests</strong></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">TestUserRepository_Create</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Setup test database</span></span>
<span class="line">    db <span class="token operator">:=</span> <span class="token function">setupTestDB</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">defer</span> db<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    repo <span class="token operator">:=</span> <span class="token function">NewUserRepository</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    tests <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">        name    <span class="token builtin">string</span></span>
<span class="line">        user    <span class="token operator">*</span>User</span>
<span class="line">        wantErr <span class="token builtin">bool</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            name<span class="token punctuation">:</span> <span class="token string">&quot;valid user&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            user<span class="token punctuation">:</span> <span class="token operator">&amp;</span>User<span class="token punctuation">{</span></span>
<span class="line">                Email<span class="token punctuation">:</span>    <span class="token string">&quot;test@example.com&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                Password<span class="token punctuation">:</span> <span class="token string">&quot;password123&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            wantErr<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            name<span class="token punctuation">:</span> <span class="token string">&quot;duplicate email&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            user<span class="token punctuation">:</span> <span class="token operator">&amp;</span>User<span class="token punctuation">{</span></span>
<span class="line">                Email<span class="token punctuation">:</span>    <span class="token string">&quot;test@example.com&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                Password<span class="token punctuation">:</span> <span class="token string">&quot;password123&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            wantErr<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> tt <span class="token operator">:=</span> <span class="token keyword">range</span> tests <span class="token punctuation">{</span></span>
<span class="line">        t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>tt<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// Execute</span></span>
<span class="line">            err <span class="token operator">:=</span> repo<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tt<span class="token punctuation">.</span>user<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// Assert</span></span>
<span class="line">            <span class="token keyword">if</span> tt<span class="token punctuation">.</span>wantErr <span class="token punctuation">{</span></span>
<span class="line">                assert<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                assert<span class="token punctuation">.</span><span class="token function">NoError</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">                assert<span class="token punctuation">.</span><span class="token function">NotEmpty</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> tt<span class="token punctuation">.</span>user<span class="token punctuation">.</span>ID<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="vue-component-tests" tabindex="-1"><a class="header-anchor" href="#vue-component-tests"><span>Vue Component Tests</span></a></h3><ol><li><p><strong>Component Tests</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> mount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/test-utils&#39;</span></span>
<span class="line"><span class="token keyword">import</span> UserForm <span class="token keyword">from</span> <span class="token string">&#39;./UserForm.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;UserForm&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;submits form data correctly&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>UserForm<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">const</span> email <span class="token operator">=</span> <span class="token string">&#39;test@example.com&#39;</span></span>
<span class="line">    <span class="token keyword">const</span> password <span class="token operator">=</span> <span class="token string">&#39;password123&#39;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">await</span> wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;input[type=&quot;email&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">await</span> wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;input[type=&quot;password&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">await</span> wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;form&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&#39;submit&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">emitted</span><span class="token punctuation">(</span><span class="token string">&#39;submit&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      email<span class="token punctuation">,</span></span>
<span class="line">      password</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;validates email format&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>UserForm<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">const</span> invalidEmail <span class="token operator">=</span> <span class="token string">&#39;invalid-email&#39;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">await</span> wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;input[type=&quot;email&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>invalidEmail<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">await</span> wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;form&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&#39;submit&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">&#39;Invalid email format&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Store Tests</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span></span>
<span class="line"><span class="token keyword">import</span> userModule <span class="token keyword">from</span> <span class="token string">&#39;./store/modules/user&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;User Store&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> store</span>
<span class="line"></span>
<span class="line">  <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">user</span><span class="token operator">:</span> userModule</span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;creates user successfully&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> userData <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">&#39;test@example.com&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;password123&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">await</span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">&#39;user/createUser&#39;</span><span class="token punctuation">,</span> userData<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">expect</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>user<span class="token punctuation">.</span>currentUser<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">email</span><span class="token operator">:</span> userData<span class="token punctuation">.</span>email</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="integration-testing" tabindex="-1"><a class="header-anchor" href="#integration-testing"><span>Integration Testing</span></a></h2><h3 id="api-integration-tests" tabindex="-1"><a class="header-anchor" href="#api-integration-tests"><span>API Integration Tests</span></a></h3><ol><li><p><strong>HTTP Handler Tests</strong></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">TestUserHandler_CreateUser</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Setup</span></span>
<span class="line">    mockService <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>MockUserService<span class="token punctuation">)</span></span>
<span class="line">    handler <span class="token operator">:=</span> <span class="token function">NewUserHandler</span><span class="token punctuation">(</span>mockService<span class="token punctuation">)</span></span>
<span class="line">    router <span class="token operator">:=</span> <span class="token function">setupTestRouter</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    tests <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">        name       <span class="token builtin">string</span></span>
<span class="line">        payload    <span class="token builtin">string</span></span>
<span class="line">        wantStatus <span class="token builtin">int</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            name<span class="token punctuation">:</span> <span class="token string">&quot;valid request&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            payload<span class="token punctuation">:</span> <span class="token string">\`{</span>
<span class="line">                &quot;email&quot;: &quot;test@example.com&quot;,</span>
<span class="line">                &quot;password&quot;: &quot;password123&quot;</span>
<span class="line">            }\`</span><span class="token punctuation">,</span></span>
<span class="line">            wantStatus<span class="token punctuation">:</span> http<span class="token punctuation">.</span>StatusCreated<span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            name<span class="token punctuation">:</span> <span class="token string">&quot;invalid request&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            payload<span class="token punctuation">:</span> <span class="token string">\`{</span>
<span class="line">                &quot;email&quot;: &quot;invalid-email&quot;,</span>
<span class="line">                &quot;password&quot;: &quot;123&quot;</span>
<span class="line">            }\`</span><span class="token punctuation">,</span></span>
<span class="line">            wantStatus<span class="token punctuation">:</span> http<span class="token punctuation">.</span>StatusBadRequest<span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> tt <span class="token operator">:=</span> <span class="token keyword">range</span> tests <span class="token punctuation">{</span></span>
<span class="line">        t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>tt<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// Execute</span></span>
<span class="line">            req <span class="token operator">:=</span> httptest<span class="token punctuation">.</span><span class="token function">NewRequest</span><span class="token punctuation">(</span><span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/users&quot;</span><span class="token punctuation">,</span> strings<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>tt<span class="token punctuation">.</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            w <span class="token operator">:=</span> httptest<span class="token punctuation">.</span><span class="token function">NewRecorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            router<span class="token punctuation">.</span><span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> req<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// Assert</span></span>
<span class="line">            assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> tt<span class="token punctuation">.</span>wantStatus<span class="token punctuation">,</span> w<span class="token punctuation">.</span>Code<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>gRPC Service Tests</strong></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">TestUserService_CreateUser</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Setup</span></span>
<span class="line">    mockRepo <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>MockUserRepository<span class="token punctuation">)</span></span>
<span class="line">    service <span class="token operator">:=</span> <span class="token function">NewUserService</span><span class="token punctuation">(</span>mockRepo<span class="token punctuation">)</span></span>
<span class="line">    server <span class="token operator">:=</span> grpc<span class="token punctuation">.</span><span class="token function">NewServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    pb<span class="token punctuation">.</span><span class="token function">RegisterUserServiceServer</span><span class="token punctuation">(</span>server<span class="token punctuation">,</span> service<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    tests <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">        name    <span class="token builtin">string</span></span>
<span class="line">        req     <span class="token operator">*</span>pb<span class="token punctuation">.</span>CreateUserRequest</span>
<span class="line">        wantErr <span class="token builtin">bool</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            name<span class="token punctuation">:</span> <span class="token string">&quot;valid request&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            req<span class="token punctuation">:</span> <span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>CreateUserRequest<span class="token punctuation">{</span></span>
<span class="line">                Email<span class="token punctuation">:</span>    <span class="token string">&quot;test@example.com&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                Password<span class="token punctuation">:</span> <span class="token string">&quot;password123&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            wantErr<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            name<span class="token punctuation">:</span> <span class="token string">&quot;invalid request&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            req<span class="token punctuation">:</span> <span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>CreateUserRequest<span class="token punctuation">{</span></span>
<span class="line">                Email<span class="token punctuation">:</span>    <span class="token string">&quot;invalid-email&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                Password<span class="token punctuation">:</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            wantErr<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> tt <span class="token operator">:=</span> <span class="token keyword">range</span> tests <span class="token punctuation">{</span></span>
<span class="line">        t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>tt<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// Execute</span></span>
<span class="line">            resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> service<span class="token punctuation">.</span><span class="token function">CreateUser</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tt<span class="token punctuation">.</span>req<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// Assert</span></span>
<span class="line">            <span class="token keyword">if</span> tt<span class="token punctuation">.</span>wantErr <span class="token punctuation">{</span></span>
<span class="line">                assert<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                assert<span class="token punctuation">.</span><span class="token function">NoError</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">                assert<span class="token punctuation">.</span><span class="token function">NotEmpty</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> resp<span class="token punctuation">.</span>User<span class="token punctuation">.</span>Id<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="database-integration-tests" tabindex="-1"><a class="header-anchor" href="#database-integration-tests"><span>Database Integration Tests</span></a></h3><ol><li><p><strong>Repository Tests</strong></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">TestUserRepository_Integration</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> testing<span class="token punctuation">.</span><span class="token function">Short</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        t<span class="token punctuation">.</span><span class="token function">Skip</span><span class="token punctuation">(</span><span class="token string">&quot;skipping integration test&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Setup test database</span></span>
<span class="line">    db <span class="token operator">:=</span> <span class="token function">setupTestDB</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">defer</span> db<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    repo <span class="token operator">:=</span> <span class="token function">NewUserRepository</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Test Create</span></span>
<span class="line">    user <span class="token operator">:=</span> <span class="token operator">&amp;</span>User<span class="token punctuation">{</span></span>
<span class="line">        Email<span class="token punctuation">:</span>    <span class="token string">&quot;test@example.com&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        Password<span class="token punctuation">:</span> <span class="token string">&quot;password123&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    err <span class="token operator">:=</span> repo<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span></span>
<span class="line">    assert<span class="token punctuation">.</span><span class="token function">NoError</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">    assert<span class="token punctuation">.</span><span class="token function">NotEmpty</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> user<span class="token punctuation">.</span>ID<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Test GetByID</span></span>
<span class="line">    found<span class="token punctuation">,</span> err <span class="token operator">:=</span> repo<span class="token punctuation">.</span><span class="token function">GetByID</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>ID<span class="token punctuation">)</span></span>
<span class="line">    assert<span class="token punctuation">.</span><span class="token function">NoError</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">    assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> user<span class="token punctuation">.</span>Email<span class="token punctuation">,</span> found<span class="token punctuation">.</span>Email<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Test Update</span></span>
<span class="line">    user<span class="token punctuation">.</span>Email <span class="token operator">=</span> <span class="token string">&quot;updated@example.com&quot;</span></span>
<span class="line">    err <span class="token operator">=</span> repo<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span></span>
<span class="line">    assert<span class="token punctuation">.</span><span class="token function">NoError</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Test Delete</span></span>
<span class="line">    err <span class="token operator">=</span> repo<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>ID<span class="token punctuation">)</span></span>
<span class="line">    assert<span class="token punctuation">.</span><span class="token function">NoError</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Transaction Tests</strong></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">TestUserRepository_Transaction</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> testing<span class="token punctuation">.</span><span class="token function">Short</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        t<span class="token punctuation">.</span><span class="token function">Skip</span><span class="token punctuation">(</span><span class="token string">&quot;skipping integration test&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Setup test database</span></span>
<span class="line">    db <span class="token operator">:=</span> <span class="token function">setupTestDB</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">defer</span> db<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    repo <span class="token operator">:=</span> <span class="token function">NewUserRepository</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Start transaction</span></span>
<span class="line">    tx<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">BeginTx</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span></span>
<span class="line">    assert<span class="token punctuation">.</span><span class="token function">NoError</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Create user in transaction</span></span>
<span class="line">    user <span class="token operator">:=</span> <span class="token operator">&amp;</span>User<span class="token punctuation">{</span></span>
<span class="line">        Email<span class="token punctuation">:</span>    <span class="token string">&quot;test@example.com&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        Password<span class="token punctuation">:</span> <span class="token string">&quot;password123&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    err <span class="token operator">=</span> repo<span class="token punctuation">.</span><span class="token function">CreateWithTx</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tx<span class="token punctuation">,</span> user<span class="token punctuation">)</span></span>
<span class="line">    assert<span class="token punctuation">.</span><span class="token function">NoError</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Rollback transaction</span></span>
<span class="line">    err <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    assert<span class="token punctuation">.</span><span class="token function">NoError</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Verify user was not created</span></span>
<span class="line">    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> repo<span class="token punctuation">.</span><span class="token function">GetByID</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>ID<span class="token punctuation">)</span></span>
<span class="line">    assert<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="end-to-end-testing" tabindex="-1"><a class="header-anchor" href="#end-to-end-testing"><span>End-to-End Testing</span></a></h2><h3 id="api-end-to-end-tests" tabindex="-1"><a class="header-anchor" href="#api-end-to-end-tests"><span>API End-to-End Tests</span></a></h3><ol><li><p><strong>HTTP API Tests</strong></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">TestUserAPI_E2E</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> testing<span class="token punctuation">.</span><span class="token function">Short</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        t<span class="token punctuation">.</span><span class="token function">Skip</span><span class="token punctuation">(</span><span class="token string">&quot;skipping end-to-end test&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Setup test server</span></span>
<span class="line">    server <span class="token operator">:=</span> <span class="token function">setupTestServer</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">defer</span> server<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Test user creation</span></span>
<span class="line">    resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">Post</span><span class="token punctuation">(</span></span>
<span class="line">        server<span class="token punctuation">.</span>URL<span class="token operator">+</span><span class="token string">&quot;/api/users&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        strings<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span><span class="token string">\`{</span>
<span class="line">            &quot;email&quot;: &quot;test@example.com&quot;,</span>
<span class="line">            &quot;password&quot;: &quot;password123&quot;</span>
<span class="line">        }\`</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">    assert<span class="token punctuation">.</span><span class="token function">NoError</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">    assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusCreated<span class="token punctuation">,</span> resp<span class="token punctuation">.</span>StatusCode<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> user User</span>
<span class="line">    err <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">NewDecoder</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span></span>
<span class="line">    assert<span class="token punctuation">.</span><span class="token function">NoError</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">    assert<span class="token punctuation">.</span><span class="token function">NotEmpty</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> user<span class="token punctuation">.</span>ID<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Test user retrieval</span></span>
<span class="line">    resp<span class="token punctuation">,</span> err <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>server<span class="token punctuation">.</span>URL <span class="token operator">+</span> <span class="token string">&quot;/api/users/&quot;</span> <span class="token operator">+</span> user<span class="token punctuation">.</span>ID<span class="token punctuation">)</span></span>
<span class="line">    assert<span class="token punctuation">.</span><span class="token function">NoError</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">    assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> resp<span class="token punctuation">.</span>StatusCode<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> found User</span>
<span class="line">    err <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">NewDecoder</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>found<span class="token punctuation">)</span></span>
<span class="line">    assert<span class="token punctuation">.</span><span class="token function">NoError</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">    assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> user<span class="token punctuation">.</span>Email<span class="token punctuation">,</span> found<span class="token punctuation">.</span>Email<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>gRPC API Tests</strong></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">TestUserService_E2E</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> testing<span class="token punctuation">.</span><span class="token function">Short</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        t<span class="token punctuation">.</span><span class="token function">Skip</span><span class="token punctuation">(</span><span class="token string">&quot;skipping end-to-end test&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Setup test server</span></span>
<span class="line">    server <span class="token operator">:=</span> <span class="token function">setupTestServer</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">defer</span> server<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Create client</span></span>
<span class="line">    conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> grpc<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span>server<span class="token punctuation">.</span>Addr<span class="token punctuation">,</span> grpc<span class="token punctuation">.</span><span class="token function">WithInsecure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    assert<span class="token punctuation">.</span><span class="token function">NoError</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    client <span class="token operator">:=</span> pb<span class="token punctuation">.</span><span class="token function">NewUserServiceClient</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Test user creation</span></span>
<span class="line">    resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">CreateUser</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>CreateUserRequest<span class="token punctuation">{</span></span>
<span class="line">        Email<span class="token punctuation">:</span>    <span class="token string">&quot;test@example.com&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        Password<span class="token punctuation">:</span> <span class="token string">&quot;password123&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    assert<span class="token punctuation">.</span><span class="token function">NoError</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">    assert<span class="token punctuation">.</span><span class="token function">NotEmpty</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> resp<span class="token punctuation">.</span>User<span class="token punctuation">.</span>Id<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Test user retrieval</span></span>
<span class="line">    found<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">GetUser</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>GetUserRequest<span class="token punctuation">{</span></span>
<span class="line">        Id<span class="token punctuation">:</span> resp<span class="token punctuation">.</span>User<span class="token punctuation">.</span>Id<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    assert<span class="token punctuation">.</span><span class="token function">NoError</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">    assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> resp<span class="token punctuation">.</span>User<span class="token punctuation">.</span>Email<span class="token punctuation">,</span> found<span class="token punctuation">.</span>User<span class="token punctuation">.</span>Email<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="frontend-end-to-end-tests" tabindex="-1"><a class="header-anchor" href="#frontend-end-to-end-tests"><span>Frontend End-to-End Tests</span></a></h3><ol><li><p><strong>User Flow Tests</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;User Flow&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;completes user registration and login&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Register new user</span></span>
<span class="line">    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">&#39;http://localhost:3000/register&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;input[type=&quot;email&quot;]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;test@example.com&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;input[type=&quot;password&quot;]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;password123&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token string">&#39;button[type=&quot;submit&quot;]&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">waitForNavigation</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Verify registration success</span></span>
<span class="line">    <span class="token function">expect</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;http://localhost:3000/login&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Login</span></span>
<span class="line">    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;input[type=&quot;email&quot;]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;test@example.com&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;input[type=&quot;password&quot;]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;password123&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token string">&#39;button[type=&quot;submit&quot;]&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">waitForNavigation</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Verify login success</span></span>
<span class="line">    <span class="token function">expect</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;http://localhost:3000/get-started&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Product Flow Tests</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;Product Flow&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;completes product creation and listing&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Login</span></span>
<span class="line">    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">&#39;http://localhost:3000/login&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;input[type=&quot;email&quot;]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;merchant@example.com&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;input[type=&quot;password&quot;]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;password123&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token string">&#39;button[type=&quot;submit&quot;]&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">waitForNavigation</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Create product</span></span>
<span class="line">    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">&#39;http://localhost:3000/products/new&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;input[name=&quot;name&quot;]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Test Product&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;input[name=&quot;price&quot;]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;10.99&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;textarea[name=&quot;description&quot;]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Test Description&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token string">&#39;button[type=&quot;submit&quot;]&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">waitForNavigation</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Verify product creation</span></span>
<span class="line">    <span class="token function">expect</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;http://localhost:3000/products&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">textContent</span><span class="token punctuation">(</span><span class="token string">&#39;.product-name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;Test Product&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="performance-testing" tabindex="-1"><a class="header-anchor" href="#performance-testing"><span>Performance Testing</span></a></h2><h3 id="load-testing" tabindex="-1"><a class="header-anchor" href="#load-testing"><span>Load Testing</span></a></h3><ol><li><p><strong>API Load Tests</strong></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">TestUserAPI_Load</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> testing<span class="token punctuation">.</span><span class="token function">Short</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        t<span class="token punctuation">.</span><span class="token function">Skip</span><span class="token punctuation">(</span><span class="token string">&quot;skipping load test&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Setup test server</span></span>
<span class="line">    server <span class="token operator">:=</span> <span class="token function">setupTestServer</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">defer</span> server<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Define test scenarios</span></span>
<span class="line">    scenarios <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">        name     <span class="token builtin">string</span></span>
<span class="line">        requests <span class="token builtin">int</span></span>
<span class="line">        workers  <span class="token builtin">int</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            name<span class="token punctuation">:</span>     <span class="token string">&quot;light load&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            requests<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span></span>
<span class="line">            workers<span class="token punctuation">:</span>  <span class="token number">10</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            name<span class="token punctuation">:</span>     <span class="token string">&quot;medium load&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            requests<span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">,</span></span>
<span class="line">            workers<span class="token punctuation">:</span>  <span class="token number">50</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            name<span class="token punctuation">:</span>     <span class="token string">&quot;heavy load&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            requests<span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">,</span></span>
<span class="line">            workers<span class="token punctuation">:</span>  <span class="token number">100</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> scenario <span class="token operator">:=</span> <span class="token keyword">range</span> scenarios <span class="token punctuation">{</span></span>
<span class="line">        t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>scenario<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// Create worker pool</span></span>
<span class="line">            jobs <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> scenario<span class="token punctuation">.</span>requests<span class="token punctuation">)</span></span>
<span class="line">            results <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">error</span><span class="token punctuation">,</span> scenario<span class="token punctuation">.</span>requests<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// Start workers</span></span>
<span class="line">            <span class="token keyword">for</span> w <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> w <span class="token operator">&lt;</span> scenario<span class="token punctuation">.</span>workers<span class="token punctuation">;</span> w<span class="token operator">++</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">go</span> <span class="token function">worker</span><span class="token punctuation">(</span>server<span class="token punctuation">.</span>URL<span class="token punctuation">,</span> jobs<span class="token punctuation">,</span> results<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// Send jobs</span></span>
<span class="line">            <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> scenario<span class="token punctuation">.</span>requests<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span></span>
<span class="line">                jobs <span class="token operator">&lt;-</span> i</span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token function">close</span><span class="token punctuation">(</span>jobs<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// Collect results</span></span>
<span class="line">            <span class="token keyword">var</span> errors <span class="token builtin">int</span></span>
<span class="line">            <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> scenario<span class="token punctuation">.</span>requests<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token operator">&lt;-</span>results<span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">                    errors<span class="token operator">++</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// Assert error rate</span></span>
<span class="line">            errorRate <span class="token operator">:=</span> <span class="token function">float64</span><span class="token punctuation">(</span>errors<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">float64</span><span class="token punctuation">(</span>scenario<span class="token punctuation">.</span>requests<span class="token punctuation">)</span></span>
<span class="line">            assert<span class="token punctuation">.</span><span class="token function">Less</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> errorRate<span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span> <span class="token comment">// Less than 1% error rate</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Database Load Tests</strong></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">TestUserRepository_Load</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> testing<span class="token punctuation">.</span><span class="token function">Short</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        t<span class="token punctuation">.</span><span class="token function">Skip</span><span class="token punctuation">(</span><span class="token string">&quot;skipping load test&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Setup test database</span></span>
<span class="line">    db <span class="token operator">:=</span> <span class="token function">setupTestDB</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">defer</span> db<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    repo <span class="token operator">:=</span> <span class="token function">NewUserRepository</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Define test scenarios</span></span>
<span class="line">    scenarios <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">        name     <span class="token builtin">string</span></span>
<span class="line">        users    <span class="token builtin">int</span></span>
<span class="line">        workers  <span class="token builtin">int</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            name<span class="token punctuation">:</span>     <span class="token string">&quot;light load&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            users<span class="token punctuation">:</span>    <span class="token number">100</span><span class="token punctuation">,</span></span>
<span class="line">            workers<span class="token punctuation">:</span>  <span class="token number">10</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            name<span class="token punctuation">:</span>     <span class="token string">&quot;medium load&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            users<span class="token punctuation">:</span>    <span class="token number">1000</span><span class="token punctuation">,</span></span>
<span class="line">            workers<span class="token punctuation">:</span>  <span class="token number">50</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            name<span class="token punctuation">:</span>     <span class="token string">&quot;heavy load&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            users<span class="token punctuation">:</span>    <span class="token number">10000</span><span class="token punctuation">,</span></span>
<span class="line">            workers<span class="token punctuation">:</span>  <span class="token number">100</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> scenario <span class="token operator">:=</span> <span class="token keyword">range</span> scenarios <span class="token punctuation">{</span></span>
<span class="line">        t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>scenario<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// Create worker pool</span></span>
<span class="line">            jobs <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> scenario<span class="token punctuation">.</span>users<span class="token punctuation">)</span></span>
<span class="line">            results <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">error</span><span class="token punctuation">,</span> scenario<span class="token punctuation">.</span>users<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// Start workers</span></span>
<span class="line">            <span class="token keyword">for</span> w <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> w <span class="token operator">&lt;</span> scenario<span class="token punctuation">.</span>workers<span class="token punctuation">;</span> w<span class="token operator">++</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token keyword">range</span> jobs <span class="token punctuation">{</span></span>
<span class="line">                        user <span class="token operator">:=</span> <span class="token operator">&amp;</span>User<span class="token punctuation">{</span></span>
<span class="line">                            Email<span class="token punctuation">:</span>    fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;test%d@example.com&quot;</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                            Password<span class="token punctuation">:</span> <span class="token string">&quot;password123&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                        <span class="token punctuation">}</span></span>
<span class="line">                        err <span class="token operator">:=</span> repo<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span></span>
<span class="line">                        results <span class="token operator">&lt;-</span> err</span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// Send jobs</span></span>
<span class="line">            <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> scenario<span class="token punctuation">.</span>users<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span></span>
<span class="line">                jobs <span class="token operator">&lt;-</span> i</span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token function">close</span><span class="token punctuation">(</span>jobs<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// Collect results</span></span>
<span class="line">            <span class="token keyword">var</span> errors <span class="token builtin">int</span></span>
<span class="line">            <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> scenario<span class="token punctuation">.</span>users<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token operator">&lt;-</span>results<span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">                    errors<span class="token operator">++</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// Assert error rate</span></span>
<span class="line">            errorRate <span class="token operator">:=</span> <span class="token function">float64</span><span class="token punctuation">(</span>errors<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">float64</span><span class="token punctuation">(</span>scenario<span class="token punctuation">.</span>users<span class="token punctuation">)</span></span>
<span class="line">            assert<span class="token punctuation">.</span><span class="token function">Less</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> errorRate<span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span> <span class="token comment">// Less than 1% error rate</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="stress-testing" tabindex="-1"><a class="header-anchor" href="#stress-testing"><span>Stress Testing</span></a></h3><ol><li><p><strong>API Stress Tests</strong></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">TestUserAPI_Stress</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> testing<span class="token punctuation">.</span><span class="token function">Short</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        t<span class="token punctuation">.</span><span class="token function">Skip</span><span class="token punctuation">(</span><span class="token string">&quot;skipping stress test&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Setup test server</span></span>
<span class="line">    server <span class="token operator">:=</span> <span class="token function">setupTestServer</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">defer</span> server<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Define test scenarios</span></span>
<span class="line">    scenarios <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">        name     <span class="token builtin">string</span></span>
<span class="line">        duration time<span class="token punctuation">.</span>Duration</span>
<span class="line">        rps      <span class="token builtin">int</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            name<span class="token punctuation">:</span>     <span class="token string">&quot;short burst&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            duration<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Minute<span class="token punctuation">,</span></span>
<span class="line">            rps<span class="token punctuation">:</span>      <span class="token number">100</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            name<span class="token punctuation">:</span>     <span class="token string">&quot;medium burst&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            duration<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Minute<span class="token punctuation">,</span></span>
<span class="line">            rps<span class="token punctuation">:</span>      <span class="token number">50</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            name<span class="token punctuation">:</span>     <span class="token string">&quot;long burst&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            duration<span class="token punctuation">:</span> <span class="token number">30</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Minute<span class="token punctuation">,</span></span>
<span class="line">            rps<span class="token punctuation">:</span>      <span class="token number">10</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> scenario <span class="token operator">:=</span> <span class="token keyword">range</span> scenarios <span class="token punctuation">{</span></span>
<span class="line">        t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>scenario<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// Create ticker for rate limiting</span></span>
<span class="line">            ticker <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTicker</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">/</span> time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>scenario<span class="token punctuation">.</span>rps<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">defer</span> ticker<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// Create done channel</span></span>
<span class="line">            done <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>scenario<span class="token punctuation">.</span>duration<span class="token punctuation">)</span></span>
<span class="line">                done <span class="token operator">&lt;-</span> <span class="token boolean">true</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// Start stress test</span></span>
<span class="line">            <span class="token keyword">var</span> errors <span class="token builtin">int</span></span>
<span class="line">            <span class="token keyword">var</span> total <span class="token builtin">int</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">select</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">case</span> <span class="token operator">&lt;-</span>ticker<span class="token punctuation">.</span>C<span class="token punctuation">:</span></span>
<span class="line">                    <span class="token comment">// Send request</span></span>
<span class="line">                    resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">Post</span><span class="token punctuation">(</span></span>
<span class="line">                        server<span class="token punctuation">.</span>URL<span class="token operator">+</span><span class="token string">&quot;/api/users&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                        <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                        strings<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span><span class="token string">\`{</span>
<span class="line">                            &quot;email&quot;: &quot;test@example.com&quot;,</span>
<span class="line">                            &quot;password&quot;: &quot;password123&quot;</span>
<span class="line">                        }\`</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token punctuation">)</span></span>
<span class="line">                    total<span class="token operator">++</span></span>
<span class="line">                    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">||</span> resp<span class="token punctuation">.</span>StatusCode <span class="token operator">!=</span> http<span class="token punctuation">.</span>StatusCreated <span class="token punctuation">{</span></span>
<span class="line">                        errors<span class="token operator">++</span></span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line">                <span class="token keyword">case</span> <span class="token operator">&lt;-</span>done<span class="token punctuation">:</span></span>
<span class="line">                    <span class="token comment">// Calculate error rate</span></span>
<span class="line">                    errorRate <span class="token operator">:=</span> <span class="token function">float64</span><span class="token punctuation">(</span>errors<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">float64</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span></span>
<span class="line">                    assert<span class="token punctuation">.</span><span class="token function">Less</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> errorRate<span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span> <span class="token comment">// Less than 1% error rate</span></span>
<span class="line">                    <span class="token keyword">return</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Database Stress Tests</strong></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">TestUserRepository_Stress</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> testing<span class="token punctuation">.</span><span class="token function">Short</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        t<span class="token punctuation">.</span><span class="token function">Skip</span><span class="token punctuation">(</span><span class="token string">&quot;skipping stress test&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Setup test database</span></span>
<span class="line">    db <span class="token operator">:=</span> <span class="token function">setupTestDB</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">defer</span> db<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    repo <span class="token operator">:=</span> <span class="token function">NewUserRepository</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Define test scenarios</span></span>
<span class="line">    scenarios <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">        name     <span class="token builtin">string</span></span>
<span class="line">        duration time<span class="token punctuation">.</span>Duration</span>
<span class="line">        rps      <span class="token builtin">int</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            name<span class="token punctuation">:</span>     <span class="token string">&quot;short burst&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            duration<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Minute<span class="token punctuation">,</span></span>
<span class="line">            rps<span class="token punctuation">:</span>      <span class="token number">100</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            name<span class="token punctuation">:</span>     <span class="token string">&quot;medium burst&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            duration<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Minute<span class="token punctuation">,</span></span>
<span class="line">            rps<span class="token punctuation">:</span>      <span class="token number">50</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            name<span class="token punctuation">:</span>     <span class="token string">&quot;long burst&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            duration<span class="token punctuation">:</span> <span class="token number">30</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Minute<span class="token punctuation">,</span></span>
<span class="line">            rps<span class="token punctuation">:</span>      <span class="token number">10</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> scenario <span class="token operator">:=</span> <span class="token keyword">range</span> scenarios <span class="token punctuation">{</span></span>
<span class="line">        t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>scenario<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// Create ticker for rate limiting</span></span>
<span class="line">            ticker <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTicker</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">/</span> time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>scenario<span class="token punctuation">.</span>rps<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">defer</span> ticker<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// Create done channel</span></span>
<span class="line">            done <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>scenario<span class="token punctuation">.</span>duration<span class="token punctuation">)</span></span>
<span class="line">                done <span class="token operator">&lt;-</span> <span class="token boolean">true</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// Start stress test</span></span>
<span class="line">            <span class="token keyword">var</span> errors <span class="token builtin">int</span></span>
<span class="line">            <span class="token keyword">var</span> total <span class="token builtin">int</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">select</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">case</span> <span class="token operator">&lt;-</span>ticker<span class="token punctuation">.</span>C<span class="token punctuation">:</span></span>
<span class="line">                    <span class="token comment">// Create user</span></span>
<span class="line">                    user <span class="token operator">:=</span> <span class="token operator">&amp;</span>User<span class="token punctuation">{</span></span>
<span class="line">                        Email<span class="token punctuation">:</span>    fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;test%d@example.com&quot;</span><span class="token punctuation">,</span> total<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                        Password<span class="token punctuation">:</span> <span class="token string">&quot;password123&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line">                    err <span class="token operator">:=</span> repo<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span></span>
<span class="line">                    total<span class="token operator">++</span></span>
<span class="line">                    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">                        errors<span class="token operator">++</span></span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line">                <span class="token keyword">case</span> <span class="token operator">&lt;-</span>done<span class="token punctuation">:</span></span>
<span class="line">                    <span class="token comment">// Calculate error rate</span></span>
<span class="line">                    errorRate <span class="token operator">:=</span> <span class="token function">float64</span><span class="token punctuation">(</span>errors<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">float64</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span></span>
<span class="line">                    assert<span class="token punctuation">.</span><span class="token function">Less</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> errorRate<span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span> <span class="token comment">// Less than 1% error rate</span></span>
<span class="line">                    <span class="token keyword">return</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="test-utilities" tabindex="-1"><a class="header-anchor" href="#test-utilities"><span>Test Utilities</span></a></h2><h3 id="test-helpers" tabindex="-1"><a class="header-anchor" href="#test-helpers"><span>Test Helpers</span></a></h3><ol><li><p><strong>Database Setup</strong></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">setupTestDB</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Create test database</span></span>
<span class="line">    db<span class="token punctuation">,</span> err <span class="token operator">:=</span> sql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">&quot;postgres&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;postgres://postgres:secret@localhost:5432/foodhouse_test?sslmode=disable&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    assert<span class="token punctuation">.</span><span class="token function">NoError</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Run migrations</span></span>
<span class="line">    err <span class="token operator">=</span> migrate<span class="token punctuation">.</span><span class="token function">Up</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span></span>
<span class="line">    assert<span class="token punctuation">.</span><span class="token function">NoError</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Clean up after test</span></span>
<span class="line">    t<span class="token punctuation">.</span><span class="token function">Cleanup</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        err <span class="token operator">:=</span> migrate<span class="token punctuation">.</span><span class="token function">Down</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span></span>
<span class="line">        assert<span class="token punctuation">.</span><span class="token function">NoError</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">        db<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> db</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Test Server Setup</strong></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">setupTestServer</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token operator">*</span>httptest<span class="token punctuation">.</span>Server <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Create test database</span></span>
<span class="line">    db <span class="token operator">:=</span> <span class="token function">setupTestDB</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Create repository</span></span>
<span class="line">    repo <span class="token operator">:=</span> <span class="token function">NewUserRepository</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Create service</span></span>
<span class="line">    service <span class="token operator">:=</span> <span class="token function">NewUserService</span><span class="token punctuation">(</span>repo<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Create handler</span></span>
<span class="line">    handler <span class="token operator">:=</span> <span class="token function">NewUserHandler</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Create router</span></span>
<span class="line">    router <span class="token operator">:=</span> <span class="token function">setupRouter</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Create test server</span></span>
<span class="line">    server <span class="token operator">:=</span> httptest<span class="token punctuation">.</span><span class="token function">NewServer</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Clean up after test</span></span>
<span class="line">    t<span class="token punctuation">.</span><span class="token function">Cleanup</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        server<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> server</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="mock-objects" tabindex="-1"><a class="header-anchor" href="#mock-objects"><span>Mock Objects</span></a></h3><ol><li><p><strong>Repository Mock</strong></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">type</span> MockUserRepository <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    mock<span class="token punctuation">.</span>Mock</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>MockUserRepository<span class="token punctuation">)</span> <span class="token function">Create</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> user <span class="token operator">*</span>User<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">    args <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">Called</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> user<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> args<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>MockUserRepository<span class="token punctuation">)</span> <span class="token function">GetByID</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> id <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>User<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    args <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">Called</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> id<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> args<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> args<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>User<span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>MockUserRepository<span class="token punctuation">)</span> <span class="token function">Update</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> user <span class="token operator">*</span>User<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">    args <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">Called</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> user<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> args<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>MockUserRepository<span class="token punctuation">)</span> <span class="token function">Delete</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> id <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">    args <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">Called</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> id<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> args<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Service Mock</strong></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">type</span> MockUserService <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    mock<span class="token punctuation">.</span>Mock</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>MockUserService<span class="token punctuation">)</span> <span class="token function">CreateUser</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> user <span class="token operator">*</span>User<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">    args <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">Called</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> user<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> args<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>MockUserService<span class="token punctuation">)</span> <span class="token function">GetUser</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> id <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>User<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    args <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">Called</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> id<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> args<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> args<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>User<span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>MockUserService<span class="token punctuation">)</span> <span class="token function">UpdateUser</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> user <span class="token operator">*</span>User<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">    args <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">Called</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> user<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> args<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>MockUserService<span class="token punctuation">)</span> <span class="token function">DeleteUser</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> id <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">    args <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">Called</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> id<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> args<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="test-coverage" tabindex="-1"><a class="header-anchor" href="#test-coverage"><span>Test Coverage</span></a></h2><h3 id="coverage-reports" tabindex="-1"><a class="header-anchor" href="#coverage-reports"><span>Coverage Reports</span></a></h3><ol><li><p><strong>Go Coverage</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token comment"># Generate coverage report</span></span>
<span class="line">go <span class="token builtin class-name">test</span> <span class="token parameter variable">-coverprofile</span><span class="token operator">=</span>coverage.out ./<span class="token punctuation">..</span>.</span>
<span class="line"></span>
<span class="line"><span class="token comment"># View coverage report</span></span>
<span class="line">go tool cover <span class="token parameter variable">-html</span><span class="token operator">=</span>coverage.out</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>JavaScript Coverage</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token comment"># Generate coverage report</span></span>
<span class="line"><span class="token function">npm</span> run test:coverage</span>
<span class="line"></span>
<span class="line"><span class="token comment"># View coverage report</span></span>
<span class="line"><span class="token function">open</span> coverage/lcov-report/index.html</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="coverage-requirements" tabindex="-1"><a class="header-anchor" href="#coverage-requirements"><span>Coverage Requirements</span></a></h3><ol><li><p><strong>Go Coverage</strong></p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code><span class="line"><span class="token comment"># .golangci.yaml</span></span>
<span class="line"><span class="token key atrule">linters</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">enable</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> gocritic</span>
<span class="line">    <span class="token punctuation">-</span> gocyclo</span>
<span class="line">    <span class="token punctuation">-</span> gofmt</span>
<span class="line">    <span class="token punctuation">-</span> goimports</span>
<span class="line">    <span class="token punctuation">-</span> gosec</span>
<span class="line">    <span class="token punctuation">-</span> govet</span>
<span class="line">    <span class="token punctuation">-</span> ineffassign</span>
<span class="line">    <span class="token punctuation">-</span> staticcheck</span>
<span class="line">    <span class="token punctuation">-</span> structcheck</span>
<span class="line">    <span class="token punctuation">-</span> typecheck</span>
<span class="line">    <span class="token punctuation">-</span> unused</span>
<span class="line">    <span class="token punctuation">-</span> varcheck</span>
<span class="line"></span>
<span class="line"><span class="token key atrule">linters-settings</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">gocritic</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">enabled-tags</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> diagnostic</span>
<span class="line">      <span class="token punctuation">-</span> experimental</span>
<span class="line">      <span class="token punctuation">-</span> opinionated</span>
<span class="line">      <span class="token punctuation">-</span> performance</span>
<span class="line">      <span class="token punctuation">-</span> style</span>
<span class="line">  <span class="token key atrule">gocyclo</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">min-complexity</span><span class="token punctuation">:</span> <span class="token number">15</span></span>
<span class="line">  <span class="token key atrule">govet</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">check-shadowing</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">  <span class="token key atrule">staticcheck</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">checks</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> all</span>
<span class="line">      <span class="token punctuation">-</span> <span class="token punctuation">-</span>ST1000</span>
<span class="line">      <span class="token punctuation">-</span> <span class="token punctuation">-</span>ST1003</span>
<span class="line">      <span class="token punctuation">-</span> <span class="token punctuation">-</span>ST1016</span>
<span class="line">      <span class="token punctuation">-</span> <span class="token punctuation">-</span>ST1020</span>
<span class="line">      <span class="token punctuation">-</span> <span class="token punctuation">-</span>ST1021</span>
<span class="line">      <span class="token punctuation">-</span> <span class="token punctuation">-</span>ST1022</span>
<span class="line">      <span class="token punctuation">-</span> <span class="token punctuation">-</span>ST1023</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>JavaScript Coverage</strong></p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;jest&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;collectCoverageFrom&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token string">&quot;src/**/*.{js,jsx}&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string">&quot;!src/**/*.test.{js,jsx}&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string">&quot;!src/index.js&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string">&quot;!src/serviceWorker.js&quot;</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;coverageThreshold&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;global&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;branches&quot;</span><span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;functions&quot;</span><span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;lines&quot;</span><span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;statements&quot;</span><span class="token operator">:</span> <span class="token number">80</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="test-documentation" tabindex="-1"><a class="header-anchor" href="#test-documentation"><span>Test Documentation</span></a></h2><h3 id="test-cases" tabindex="-1"><a class="header-anchor" href="#test-cases"><span>Test Cases</span></a></h3><ol><li><p><strong>API Test Cases</strong></p><div class="language-markdown line-numbers-mode" data-highlighter="prismjs" data-ext="md"><pre><code><span class="line"><span class="token title important"><span class="token punctuation">#</span> User API Test Cases</span></span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">##</span> Create User</span></span>
<span class="line"><span class="token list punctuation">-</span> Valid user data</span>
<span class="line"><span class="token list punctuation">-</span> Invalid email format</span>
<span class="line"><span class="token list punctuation">-</span> Duplicate email</span>
<span class="line"><span class="token list punctuation">-</span> Missing required fields</span>
<span class="line"><span class="token list punctuation">-</span> Invalid password format</span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">##</span> Get User</span></span>
<span class="line"><span class="token list punctuation">-</span> Valid user ID</span>
<span class="line"><span class="token list punctuation">-</span> Invalid user ID</span>
<span class="line"><span class="token list punctuation">-</span> Unauthorized access</span>
<span class="line"><span class="token list punctuation">-</span> Expired token</span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">##</span> Update User</span></span>
<span class="line"><span class="token list punctuation">-</span> Valid update data</span>
<span class="line"><span class="token list punctuation">-</span> Invalid update data</span>
<span class="line"><span class="token list punctuation">-</span> Unauthorized access</span>
<span class="line"><span class="token list punctuation">-</span> Non-existent user</span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">##</span> Delete User</span></span>
<span class="line"><span class="token list punctuation">-</span> Valid user ID</span>
<span class="line"><span class="token list punctuation">-</span> Invalid user ID</span>
<span class="line"><span class="token list punctuation">-</span> Unauthorized access</span>
<span class="line"><span class="token list punctuation">-</span> Non-existent user</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Component Test Cases</strong></p><div class="language-markdown line-numbers-mode" data-highlighter="prismjs" data-ext="md"><pre><code><span class="line"><span class="token title important"><span class="token punctuation">#</span> User Form Component Test Cases</span></span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">##</span> Form Submission</span></span>
<span class="line"><span class="token list punctuation">-</span> Valid form data</span>
<span class="line"><span class="token list punctuation">-</span> Invalid email format</span>
<span class="line"><span class="token list punctuation">-</span> Password too short</span>
<span class="line"><span class="token list punctuation">-</span> Required fields missing</span>
<span class="line"><span class="token list punctuation">-</span> Server error handling</span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">##</span> Form Validation</span></span>
<span class="line"><span class="token list punctuation">-</span> Email format validation</span>
<span class="line"><span class="token list punctuation">-</span> Password strength validation</span>
<span class="line"><span class="token list punctuation">-</span> Required field validation</span>
<span class="line"><span class="token list punctuation">-</span> Custom validation rules</span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">##</span> Error Handling</span></span>
<span class="line"><span class="token list punctuation">-</span> Network error</span>
<span class="line"><span class="token list punctuation">-</span> Server error</span>
<span class="line"><span class="token list punctuation">-</span> Validation error</span>
<span class="line"><span class="token list punctuation">-</span> Timeout error</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="test-reports" tabindex="-1"><a class="header-anchor" href="#test-reports"><span>Test Reports</span></a></h3><ol><li><p><strong>Test Summary</strong></p><div class="language-markdown line-numbers-mode" data-highlighter="prismjs" data-ext="md"><pre><code><span class="line"><span class="token title important"><span class="token punctuation">#</span> Test Summary</span></span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">##</span> Unit Tests</span></span>
<span class="line"><span class="token list punctuation">-</span> Total: 100</span>
<span class="line"><span class="token list punctuation">-</span> Passed: 98</span>
<span class="line"><span class="token list punctuation">-</span> Failed: 2</span>
<span class="line"><span class="token list punctuation">-</span> Coverage: 85%</span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">##</span> Integration Tests</span></span>
<span class="line"><span class="token list punctuation">-</span> Total: 50</span>
<span class="line"><span class="token list punctuation">-</span> Passed: 48</span>
<span class="line"><span class="token list punctuation">-</span> Failed: 2</span>
<span class="line"><span class="token list punctuation">-</span> Coverage: 75%</span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">##</span> End-to-End Tests</span></span>
<span class="line"><span class="token list punctuation">-</span> Total: 20</span>
<span class="line"><span class="token list punctuation">-</span> Passed: 18</span>
<span class="line"><span class="token list punctuation">-</span> Failed: 2</span>
<span class="line"><span class="token list punctuation">-</span> Coverage: 60%</span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">##</span> Performance Tests</span></span>
<span class="line"><span class="token list punctuation">-</span> Load Tests: Passed</span>
<span class="line"><span class="token list punctuation">-</span> Stress Tests: Passed</span>
<span class="line"><span class="token list punctuation">-</span> Bottleneck: Database queries</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Test Metrics</strong></p><div class="language-markdown line-numbers-mode" data-highlighter="prismjs" data-ext="md"><pre><code><span class="line"><span class="token title important"><span class="token punctuation">#</span> Test Metrics</span></span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">##</span> Response Time</span></span>
<span class="line"><span class="token list punctuation">-</span> Average: 100ms</span>
<span class="line"><span class="token list punctuation">-</span> P95: 200ms</span>
<span class="line"><span class="token list punctuation">-</span> P99: 300ms</span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">##</span> Error Rate</span></span>
<span class="line"><span class="token list punctuation">-</span> Average: 0.1%</span>
<span class="line"><span class="token list punctuation">-</span> Peak: 0.5%</span>
<span class="line"><span class="token list punctuation">-</span> Threshold: 1%</span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">##</span> Throughput</span></span>
<span class="line"><span class="token list punctuation">-</span> Average: 1000 RPS</span>
<span class="line"><span class="token list punctuation">-</span> Peak: 2000 RPS</span>
<span class="line"><span class="token list punctuation">-</span> Target: 5000 RPS</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="test-resources" tabindex="-1"><a class="header-anchor" href="#test-resources"><span>Test Resources</span></a></h2><h3 id="documentation" tabindex="-1"><a class="header-anchor" href="#documentation"><span>Documentation</span></a></h3><ul><li><a href="https://golang.org/pkg/testing/" target="_blank" rel="noopener noreferrer">Go Testing</a></li><li><a href="https://jestjs.io/docs/getting-started" target="_blank" rel="noopener noreferrer">Jest Documentation</a></li><li><a href="https://playwright.dev/docs/intro" target="_blank" rel="noopener noreferrer">Playwright Documentation</a></li><li><a href="https://k6.io/docs/" target="_blank" rel="noopener noreferrer">k6 Documentation</a></li></ul><h3 id="tools" tabindex="-1"><a class="header-anchor" href="#tools"><span>Tools</span></a></h3><ul><li><a href="https://golang.org/pkg/testing/" target="_blank" rel="noopener noreferrer">Go Test</a></li><li><a href="https://jestjs.io/" target="_blank" rel="noopener noreferrer">Jest</a></li><li><a href="https://playwright.dev/" target="_blank" rel="noopener noreferrer">Playwright</a></li><li><a href="https://k6.io/" target="_blank" rel="noopener noreferrer">k6</a></li></ul><h3 id="training" tabindex="-1"><a class="header-anchor" href="#training"><span>Training</span></a></h3><ul><li><a href="https://golang.org/doc/tutorial/add-a-test" target="_blank" rel="noopener noreferrer">Go Testing Tutorial</a></li><li><a href="https://jestjs.io/docs/tutorial-react" target="_blank" rel="noopener noreferrer">Jest Tutorial</a></li><li><a href="https://playwright.dev/docs/intro" target="_blank" rel="noopener noreferrer">Playwright Tutorial</a></li><li><a href="https://k6.io/docs/getting-started" target="_blank" rel="noopener noreferrer">k6 Tutorial</a></li></ul>`,45)]))}const o=s(e,[["render",l]]),u=JSON.parse('{"path":"/testing.html","title":"Testing Guide","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Overview","slug":"overview","link":"#overview","children":[]},{"level":2,"title":"Unit Testing","slug":"unit-testing","link":"#unit-testing","children":[{"level":3,"title":"Go Unit Tests","slug":"go-unit-tests","link":"#go-unit-tests","children":[]},{"level":3,"title":"Vue Component Tests","slug":"vue-component-tests","link":"#vue-component-tests","children":[]}]},{"level":2,"title":"Integration Testing","slug":"integration-testing","link":"#integration-testing","children":[{"level":3,"title":"API Integration Tests","slug":"api-integration-tests","link":"#api-integration-tests","children":[]},{"level":3,"title":"Database Integration Tests","slug":"database-integration-tests","link":"#database-integration-tests","children":[]}]},{"level":2,"title":"End-to-End Testing","slug":"end-to-end-testing","link":"#end-to-end-testing","children":[{"level":3,"title":"API End-to-End Tests","slug":"api-end-to-end-tests","link":"#api-end-to-end-tests","children":[]},{"level":3,"title":"Frontend End-to-End Tests","slug":"frontend-end-to-end-tests","link":"#frontend-end-to-end-tests","children":[]}]},{"level":2,"title":"Performance Testing","slug":"performance-testing","link":"#performance-testing","children":[{"level":3,"title":"Load Testing","slug":"load-testing","link":"#load-testing","children":[]},{"level":3,"title":"Stress Testing","slug":"stress-testing","link":"#stress-testing","children":[]}]},{"level":2,"title":"Test Utilities","slug":"test-utilities","link":"#test-utilities","children":[{"level":3,"title":"Test Helpers","slug":"test-helpers","link":"#test-helpers","children":[]},{"level":3,"title":"Mock Objects","slug":"mock-objects","link":"#mock-objects","children":[]}]},{"level":2,"title":"Test Coverage","slug":"test-coverage","link":"#test-coverage","children":[{"level":3,"title":"Coverage Reports","slug":"coverage-reports","link":"#coverage-reports","children":[]},{"level":3,"title":"Coverage Requirements","slug":"coverage-requirements","link":"#coverage-requirements","children":[]}]},{"level":2,"title":"Test Documentation","slug":"test-documentation","link":"#test-documentation","children":[{"level":3,"title":"Test Cases","slug":"test-cases","link":"#test-cases","children":[]},{"level":3,"title":"Test Reports","slug":"test-reports","link":"#test-reports","children":[]}]},{"level":2,"title":"Test Resources","slug":"test-resources","link":"#test-resources","children":[{"level":3,"title":"Documentation","slug":"documentation","link":"#documentation","children":[]},{"level":3,"title":"Tools","slug":"tools","link":"#tools","children":[]},{"level":3,"title":"Training","slug":"training","link":"#training","children":[]}]}],"git":{"updatedTime":1748993300000,"contributors":[{"name":"andojoks","username":"andojoks","email":"andojoks@gmail.com","commits":2,"url":"https://github.com/andojoks"}],"changelog":[{"hash":"e8b7f75afa75c156c4e2dbcaac0f99cae08db4c9","time":1748993300000,"email":"andojoks@gmail.com","author":"andojoks","message":"fixed theme for login button"},{"hash":"1caefaa89d3d740642cd2a94b469bfb5049d9451","time":1748990475000,"email":"andojoks@gmail.com","author":"andojoks","message":"added in initial documentation pages"}]},"filePathRelative":"testing.md"}');export{o as comp,u as data};
